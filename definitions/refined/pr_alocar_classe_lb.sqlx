CREATE PROCEDURE `VIEWS.PR_ALOCAR_CLASSE_LB` ()
BEGIN
    DECLARE ANO_SEMANA_ATUAL INT64; 
    DECLARE ANO_SEMANA_26S INT64; 
    DECLARE HOJE DATE; 
    DECLARE AGORA TIMESTAMP;

    -- DETERMINA ANO_SEMANA_ATUAL E ANO_SEMANA_26S
    SET AGORA = CURRENT_TIMESTAMP();
    SET HOJE = CAST(AGORA AS DATE);

    SET ANO_SEMANA_ATUAL = (
      SELECT 
      CAST(REPLACE(ANO_SEMANA_ATUAL, '-', '') AS INT64)
      FROM `REFINED.calendario`
      WHERE DATA_ATUAL = HOJE);

    SET ANO_SEMANA_26S = (
      SELECT CAST(REPLACE(ANO_SEMANA_ATUAL, '-', '') AS INT64)
      FROM `REFINED.calendario`
      WHERE DATA_ATUAL = DATE_ADD(HOJE, INTERVAL -182 DAY));


    -- GERA LISTA DE DATAS PARA ETQ 26S
    IF EXISTS (SELECT * FROM `VIEWS.INFORMATION_SCHEMA.TABLES` WHERE TABLE_NAME = 'DATAS_26S') THEN
    DROP TABLE `VIEWS.DATAS_26S`;
    END IF;

    CREATE TEMP TABLE DATAS_26S AS
    SELECT
    DATA_ATUAL
    FROM `REFINED.calendario`
    WHERE CAST(REPLACE(ANO_SEMANA_ATUAL, '-', '') AS INT64) BETWEEN ANO_SEMANA_26S AND ANO_SEMANA_ATUAL
    ORDER BY DATA_ATUAL;

    -- COLETAR ETQ 26S
    IF EXISTS (SELECT * FROM `VIEWS.INFORMATION_SCHEMA.TABLES` WHERE TABLE_NAME = 'ETQ_26S') THEN
    DROP TABLE `VIEWS.ETQ_26S`;
    END IF;

    CREATE TEMP TABLE ETQ_26S AS
    SELECT
        COD_SKU = A.COD_ITPROD_SAP
        ,QTD_ETQ = SUM(
            CASE WHEN IFNULL(QTD_DISPONIVEL, 0) < 0 THEN 0 ELSE IFNULL(QTD_DISPONIVEL, 0) END
            + CASE WHEN IFNULL(QTD_TRANSITO, 0) < 0 THEN 0 ELSE IFNULL(QTD_TRANSITO, 0) END
        )
        ,VAL_PMM = AVG(NULLIF(VAL_PMM, 0))
        ,VAL_ETQ = SUM(
            CASE WHEN IFNULL(QTD_DISPONIVEL, 0) < 0 THEN 0 ELSE IFNULL(QTD_DISPONIVEL, 0) END
            + CASE WHEN IFNULL(QTD_TRANSITO, 0) < 0 THEN 0 ELSE IFNULL(QTD_TRANSITO, 0) END
        ) * AVG(NULLIF(VAL_PMM, 0))
    FROM TRUSTED.estoque_historico_estoque_sap_lb A
    RIGHT JOIN DATAS_26S B ON A.DAT_ESTOQUE = B.DATA_ATUAL
    WHERE A.COD_DEPOSITO_SAP = '0001'
    GROUP BY A.COD_ITPROD_SAP;


    -- COLETA ETQ
    IF EXISTS (SELECT * FROM `VIEWS.INFORMATION_SCHEMA.TABLES` WHERE TABLE_NAME = 'ETQ') THEN
    DROP TABLE `VIEWS.ETQ`;
    END IF;

    CREATE TEMP TABLE ETQ AS
    SELECT
        COD_SKU = A.COD_ANTIGO_SKU
        ,QTD_ETQ = SUM(
            CASE WHEN IFNULL(QTD_DISPONIVEL, 0) < 0 THEN 0 ELSE IFNULL(QTD_DISPONIVEL, 0) END
            + CASE WHEN IFNULL(QTD_TRANSITO, 0) < 0 THEN 0 ELSE IFNULL(QTD_TRANSITO, 0) END
        )
        ,VAL_PMM = AVG(NULLIF(VAL_PMM, 0))
        ,VAL_ETQ = SUM(
            CASE WHEN IFNULL(QTD_DISPONIVEL, 0) < 0 THEN 0 ELSE IFNULL(QTD_DISPONIVEL, 0) END
            + CASE WHEN IFNULL(QTD_TRANSITO, 0) < 0 THEN 0 ELSE IFNULL(QTD_TRANSITO, 0) END
        ) * AVG(NULLIF(VAL_PMM, 0))
    FROM TRUSTED.estoque_estoque_sap_lb A
    WHERE A.COD_DEPOSITO_SAP = '0001'
    GROUP BY A.COD_ANTIGO_SKU;


    -- COLETA LISTA DE ITENS
    IF EXISTS (SELECT * FROM `VIEWS.INFORMATION_SCHEMA.TABLES` WHERE TABLE_NAME = 'ITENS') THEN
    DROP TABLE `VIEWS.ITENS`;
    END IF;

    CREATE TEMP TABLE ITENS AS
    SELECT DISTINCT
        COD_SKU = A.COD_ITPROD
        ,COD_CLASSE_ATUAL = A.COD_CLASSE_ATUAL
        ,SEGM_LB = A.SEGM_LB_CLASSE
        ,BLOQ_LB = A.BLOQ_LB
    FROM REFINED.hierarquia_sku_lb A
    WHERE COD_ITPROD <> '' AND COD_ITPROD IS NOT NULL;


    -- JUNTA DADOS
    IF EXISTS (SELECT * FROM `VIEWS.INFORMATION_SCHEMA.TABLES` WHERE TABLE_NAME = 'LISTA_EXECUCAO') THEN
    DROP TABLE `VIEWS.LISTA_EXECUCAO`;
    END IF;

    CREATE TEMP TABLE LISTA_EXECUCAO AS
    SELECT
        COD_SKU = A.COD_SKU
        ,SEGM_LB = A.SEGM_LB
        ,BLOQ_LB = A.BLOQ_LB
        ,VAL_ETQ = CASE WHEN IFNULL(B.VAL_ETQ, 0) < 0 THEN 0 ELSE IFNULL(B.VAL_ETQ, 0) END
        ,CUSTO_UNIT = CASE WHEN IFNULL(B.VAL_PMM, 0) < 0 THEN 0 ELSE IFNULL(B.VAL_PMM, 0) END
        ,VAL_ETQ_26S = CASE WHEN IFNULL(C.VAL_ETQ, 0) < 0 THEN 0 ELSE IFNULL(C.VAL_ETQ, 0) END
        ,CLASSE_ANTIGA = A.COD_CLASSE_ATUAL
        ,CLASSE_NOVA = CAST(NULL AS STRING)
    FROM ITENS A
    LEFT JOIN ETQ B ON A.COD_SKU = B.COD_SKU
    LEFT JOIN ETQ_26S C ON A.COD_SKU = C.COD_SKU;

    -- LIMPA TEMPORARIAS
    DROP TABLE `VIEWS.ETQ`;
    DROP TABLE `VIEWS.ETQ_26S`;
    DROP TABLE `VIEWS.ITENS`;
    DROP TABLE `VIEWS.DATAS_26S`;


    -- EXECUTA UPDATE DA TABELA LISTA_EXECUCAO COM A NOVA CLASSE BASEADO NA SEGMENTACAO E BLOQUEIO
    UPDATE A
    SET A.CLASSE_NOVA = IFNULL(B.COD_CLASSE, A.CLASSE_ANTIGA)
    FROM LISTA_EXECUCAO A
    LEFT JOIN TRUSTED.corp_alocar_classe_depara_seg_lb B 
    ON A.SEGM_LB = B.COD_SEGMENTACAO 
    AND A.BLOQ_LB = B.COD_BLOQUEIO;
    -- SELECT * FROM #LISTA_EXECUCAO where classe_nova = 'l'


    -- ATUALIZA A CLASSE NOVA PARA ITENS DE CLASSE B E L
    UPDATE A
    SET A.CLASSE_NOVA = CASE
        WHEN A.CLASSE_NOVA = 'B' THEN CASE
            WHEN A.VAL_ETQ <= 0 THEN 'C'
            WHEN A.VAL_ETQ <= B.ETQ_LIMITE THEN 'P'
            ELSE A.CLASSE_NOVA
        END
        WHEN A.CLASSE_NOVA IN ('L', 'I') THEN CASE
            WHEN (A.VAL_ETQ_26S > 0 OR A.VAL_ETQ > 0) THEN 'I'
            ELSE A.CLASSE_NOVA
        END
        ELSE A.CLASSE_NOVA
    END
    FROM VIEWS.LISTA_EXECUCAO A
    LEFT JOIN TRUSTED.corp_alocar_classe_custo_lb B ON A.CUSTO_UNIT BETWEEN B.CUSTO_INICIAL AND B.CUSTO_FINAL;
    -- select * from #LISTA_EXECUCAO where cod_sku = '5132117'



    -- SE A CLASSE DETERMINADA FOR DIFERENTE DA ATUAL, EDITA O HISTORICO COLOCANDO DATA FIM NA LINHA ATUAL DO ITEM
    UPDATE A
    SET A.DAT_FIM_VIGENCIA = AGORA
    FROM TRUSTED.corp_classe_historica_lb A
    LEFT JOIN VIEWS.LISTA_EXECUCAO B ON A.COD_SKU = B.COD_SKU
    RIGHT JOIN (SELECT COD_SKU, NUM_SEQ = MAX(NUM_SEQ) FROM TRUSTED.corp_classe_historica_lb GROUP BY COD_SKU) C ON A.COD_SKU = C.COD_SKU AND A.NUM_SEQ = C.NUM_SEQ
    WHERE A.COD_CLASSE <> B.CLASSE_NOVA;

    -- SE A CLASSE DETERMINADA FOR DIFERENTE DA ATUAL, INSERE NO HISTORICO UMA NOVA LINHA COM A NOVA CLASSE E COM DATA INICIO = @AGORA
    INSERT INTO TRUSTED.corp_classe_historica_lb (
        COD_SKU, 
        COD_CLASSE, 
        DAT_INICIO_VIGENCIA, 
        DAT_FIM_VIGENCIA )
    SELECT
        A.COD_SKU,
        A.CLASSE_NOVA,
        AGORA,
        NULL
    FROM VIEWS.LISTA_EXECUCAO A
    LEFT JOIN (
        SELECT A.COD_SKU, A.COD_CLASSE
        FROM TRUSTED.corp_classe_historica_lb A
        RIGHT JOIN (
            SELECT COD_SKU, NUM_SEQ = MAX(NUM_SEQ) FROM TRUSTED.corp_classe_historica_lb GROUP BY COD_SKU
            ) B ON A.COD_SKU = B.COD_SKU AND A.NUM_SEQ = B.NUM_SEQ
    ) B ON A.COD_SKU = B.COD_SKU
    WHERE B.COD_CLASSE <> A.CLASSE_NOVA OR B.COD_CLASSE IS NULL;



    -- LIMPA BASE DE CLASSE_ATUAL E INSERE A NOVA LISTA
    TRUNCATE TABLE TRUSTED.corp_classe_atual_lb;

    INSERT INTO TRUSTED.corp_classe_atual_lb (COD_SKU, COD_CLASSE)
    SELECT
        A.COD_SKU, 
        A.CLASSE_NOVA
    FROM VIEWS.LISTA_EXECUCAO A;

    DROP TABLE LISTA_EXECUCAO;
END

